# File generated by peppercorn-v1.1.1

# Domains (18) 
length fB = 7
length fX1 = 7
length fX2 = 7
length hB = 15
length hX1 = 15
length hX2 = 15
length mX1 = 15
length mX2 = 15
length sX1 = 7
length sX2 = 7

length fBR = 7
length fX1R = 7
length fX2R = 7
length hBR = 15
length hX1R = 15
length hX2R = 15
length mX1R = 15
length mX2R = 15
length sX1R = 7
length sX2R = 7

length fO1 = 7
length fO2 = 7
length sO1 = 7
length sO2 = 7
length mO1 = 15
length mO2 = 15
length hO1 = 15
length hO2 = 15

# Resting complexes (12) 
R_NUM_HelperBX1 = fB hB fB @initial 100 nM
R_NUM_27 = sX1( mX1( fX1( hX1 + ) ) ) fB*( hB*( fB*( + ) ) )
R_NUM_BackBX1 = fB sX1 mX1 @initial 1000 nM
R_NUM_ReactX1B = hX1 fB( hB( + fB( sX1( mX1( + fX1* ) ) ) ) ) @initial 100 nM
R_NUM_33 = fX2( hX2( fX1( + hX1( fB( hB + ) ) ) ) )
R_NUM_9 = fB*( hX1*( fX1* hX2*( fX2*( + sX2 mX2 ) ) + ) ) hB
R_NUM_ProduceBX1X2 = sX2 mX2 fX2( hX2( + sX1 mX1 fX1( hX1( + fB* ) ) ) ) @initial 100 nM
R_NUM_19 = fX1*( mX1*( sX1*( fB* hB*( fB*( + hX1 ) ) + ) ) ) hX1
R_NUM_HelperX1X2 = fX2 hX2 fX1 @initial 100 nM
R_NUM_FluxX1B = hX1 fB hB
X1 = sX1 mX1 fX1 hX1 @initial 1 nM
X2 = sX2 mX2 fX2 hX2 @initial 1e-05 nM

O1 = sO1 mO1 fO1 hO1 @initial 1 nM
O2 = sO2 mO2 fO2 hO2 @initial 1e-5 nM

# Resting complexes (12) 
shR_NUM_HelperBX1 = fBR hBR fBR @initial 100 nM
shR_NUM_34 = fBR( hBR( fBR( + ) ) ) sX1R*( mX1R*( fX1R*( + hX1R ) ) )
shR_NUM_9 = hBR( fBR( hX1R + ) ) fBR* sX1R*( mX1R*( fX1R*( + hX1R ) ) )
shR_NUM_ReactX1B = fBR*( hBR*( fBR*( sX1R*( mX1R*( fX1R* + ) ) ) + ) ) hX1R @initial 100 nM
shR_NUM_HelperX1X2 = fX1R hX2R fX2R @initial 100 nM
shR_NUM_24 = fX2R*( hX2R*( fX1R*( hX1R*( fBR*( + hBR ) ) + ) ) )
shR_NUM_19 = hBR fBR( hX1R( + hX2R( fX2R( mX2R sX2R + ) ) fX1R* ) )
shR_NUM_ProduceBX1X2 = fX2R*( hX2R*( fX1R*( hX1R*( fBR* + ) ) mX1R sX1R + ) ) mX2R sX2R @initial 100 nM
shR_NUM_FluxX1B = hBR fBR hX1R
shX1 = hX1R fX1R mX1R sX1R @initial 0 nM
shX2 = hX2R fX2R mX2R sX2R @initial 0 nM
shR_NUM_BackBX1 = mX1R sX1R fBR @initial 1000 nM

EC_R_NUM_7 = mX2R sX2R sX2( mX2( + fX2* ) ) sX2R*( mX2R*( fX2R*( + hX2R ) ) )
EC_R_NUM_4 = mX2R( sX2R( sX2( mX2( + fX2* ) ) ) ) fX2R*( + hX2R ) mX2R sX2R
EC_R_NUM_12 = fX2*( mX2*( sX2*( sX2R*( mX2R*( fX2R*( + hX2R ) ) ) + ) ) ) hX2
R_NUM_CancelX2 = mX2R( sX2R( sX2( mX2( + fX2* ) ) ) ) fX2R* @initial 10 nM
EC_R_NUM_2 = fX2*( mX2*( sX2*( sX2R*( mX2R*( fX2R* + ) ) ) ) + sX2 mX2 ) hX2
EC_R_NUM_5 = fX2*( mX2*( sX2*( sX2R*( mX2R*( fX2R* + ) ) sX2 mX2 + ) ) ) hX2
R_NUM_dispX2 = mX2R sX2R sX2 mX2 @initial 0 nM


# Resting macrostates (12) 
macrostate R_NUM_HelperBX1 = [R_NUM_HelperBX1]
macrostate R_NUM_27 = [R_NUM_27]
macrostate R_NUM_BackBX1 = [R_NUM_BackBX1]
macrostate R_NUM_ReactX1B = [R_NUM_ReactX1B]
macrostate R_NUM_33 = [R_NUM_33]
macrostate R_NUM_9 = [R_NUM_9]
macrostate R_NUM_ProduceBX1X2 = [R_NUM_ProduceBX1X2]
macrostate R_NUM_19 = [R_NUM_19]
macrostate R_NUM_HelperX1X2 = [R_NUM_HelperX1X2]
macrostate R_NUM_FluxX1B = [R_NUM_FluxX1B]
macrostate X1 = [X1]
macrostate X2 = [X2]

macrostate shR_NUM_HelperBX1 = [shR_NUM_HelperBX1]
macrostate shR_NUM_34 = [shR_NUM_34]
macrostate shR_NUM_9 = [shR_NUM_9]
macrostate shR_NUM_ReactX1B = [shR_NUM_ReactX1B]
macrostate shR_NUM_HelperX1X2 = [shR_NUM_HelperX1X2]
macrostate shR_NUM_24 = [shR_NUM_24]
macrostate shR_NUM_19 = [shR_NUM_19]
macrostate shR_NUM_ProduceBX1X2 = [shR_NUM_ProduceBX1X2]
macrostate shR_NUM_FluxX1B = [shR_NUM_FluxX1B]
macrostate shX1 = [shX1]
macrostate shX2 = [shX2]
macrostate shR_NUM_BackBX1 = [shR_NUM_BackBX1]

macrostate EC_R_NUM_7 = [EC_R_NUM_4, EC_R_NUM_7]
macrostate EC_R_NUM_12 = [EC_R_NUM_12]
macrostate R_NUM_CancelX2 = [R_NUM_CancelX2]
macrostate EC_R_NUM_2 = [EC_R_NUM_2, EC_R_NUM_5]
macrostate shX2 = [shX2]
macrostate R_NUM_dispX2 = [R_NUM_dispX2]
macrostate X2 = [X2]

macrostate O1 = [O1]
macrostate O2 = [O2]


# Condensed reactions (6) 
reaction [condensed    = 0.002 /nM/s ] R_NUM_HelperBX1 + R_NUM_19 -> R_NUM_27 + R_NUM_FluxX1B
reaction [condensed    = 0.002 /nM/s ] R_NUM_BackBX1 + R_NUM_19 -> R_NUM_ReactX1B + X1
reaction [condensed    = 0.0001 /nM/s ] R_NUM_ReactX1B + X1 -> R_NUM_BackBX1 + R_NUM_19
reaction [condensed    =  0.002 /nM/s ] R_NUM_9 + R_NUM_HelperX1X2 -> R_NUM_33 + X2
reaction [condensed    = 0.002 /nM/s ] R_NUM_9 + X1 -> R_NUM_ProduceBX1X2 + R_NUM_FluxX1B
reaction [condensed    = 0.002 /nM/s ] R_NUM_ProduceBX1X2 + R_NUM_FluxX1B -> R_NUM_9 + X1

#Leak
reaction [condensed    = 2e-8 /nM/s ] R_NUM_ProduceBX1X2 + R_NUM_HelperX1X2 -> X2

# Shadow
reaction [condensed    = 0.002 /nM/s ] shR_NUM_HelperBX1 + shR_NUM_9 -> shR_NUM_34 + shR_NUM_FluxX1B
reaction [condensed    = 0.002 /nM/s ] shR_NUM_9 + shR_NUM_BackBX1 -> shR_NUM_ReactX1B + shX1
reaction [condensed    = 0.0001 /nM/s ] shR_NUM_ReactX1B + shX1 -> shR_NUM_9 + shR_NUM_BackBX1
reaction [condensed    =  0.002 /nM/s ] shR_NUM_HelperX1X2 + shR_NUM_19 -> shR_NUM_24 + shX2
reaction [condensed    = 0.002 /nM/s ] shR_NUM_19 + shX1 -> shR_NUM_ProduceBX1X2 + shR_NUM_FluxX1B
reaction [condensed    = 0.002 /nM/s ] shR_NUM_ProduceBX1X2 + shR_NUM_FluxX1B -> shR_NUM_19 + shX1

#Leak
reaction [condensed    = 2e-8 /nM/s ] shR_NUM_ProduceBX1X2 + shR_NUM_HelperX1X2 -> shX2

reaction [condensed    =  0.5 /s   ] EC_R_NUM_7 -> R_NUM_CancelX2 + shX2
reaction [condensed    =     0.002 /nM/s ] EC_R_NUM_7 + X2 -> EC_R_NUM_12 + R_NUM_dispX2
reaction [condensed    =     0.002 /nM/s ] R_NUM_CancelX2 + shX2 -> EC_R_NUM_7
reaction [condensed    =     0.002 /nM/s ] R_NUM_CancelX2 + X2 -> EC_R_NUM_2
reaction [condensed    =  0.5 /s   ] EC_R_NUM_2 -> R_NUM_CancelX2 + X2
reaction [condensed    =     0.002 /nM/s ] EC_R_NUM_2 + shX2 -> EC_R_NUM_12 + R_NUM_dispX2
#Buffer
reaction [condensed    = 2e-4 /s] O1 -> O1 + R_NUM_CancelX2

reaction [condensed    = 0.0008 /s] O1 -> O1 + O2

